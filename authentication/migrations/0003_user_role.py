# Generated by Django 4.1.7 on 2023-03-23 13:17
from django.db import migrations, models


# We're removing the typical Django is_superuser and is_staff fields in favor of a new role management system.
# Our system includes four roles which are stored within the User.role attribute. Only the administrator can
# access the built-in django admin panel, which means that any member of staff that is not a superuser will lose their
# access. All users that are not superusers will automatically become students.
def make_superuser_administrator(apps, schema_editor):
    User = apps.get_model("authentication", "User")
    db_alias = schema_editor.connection.alias
    superusers = User.objects.using(db_alias).filter(is_superuser=True)
    for superuser in superusers:
        superuser.role = "ADMINISTRATOR"
        superuser.save()


# Reverse function (unapply this migration)
def make_administrator_superuser(apps, schema_editor):
    User = apps.get_model("authentication", "User")
    db_alias = schema_editor.connection.alias
    admins = User.objects.using(db_alias).filter(role="ADMINISTRATOR")
    for admin in admins:
        admin.is_superuser = True
        admin.is_staff = True
        admin.save()


class Migration(migrations.Migration):
    dependencies = [
        ('authentication', '0002_alter_user_id'),
    ]

    operations = [
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.CharField(
                choices=[('ADMINISTRATOR', 'Administrator'), ('MANAGER', 'Manager'), ('INSTRUCTOR', 'Instructor'),
                         ('STUDENT', 'Student')], default='STUDENT', max_length=13),
        ),
        migrations.RunPython(make_superuser_administrator, make_administrator_superuser),
        migrations.RemoveField(
            model_name='user',
            name='is_staff',
        ),
        migrations.RemoveField(
            model_name='user',
            name='is_superuser',
        ),
    ]
