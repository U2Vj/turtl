openapi: 3.0.3
info:
  title: TURTL API documentation
  description: |-
    This is the documentation for the TURTL REST-API provided by the Django backend.
    
    Some useful links:
    - [Docs for file format](https://swagger.io/docs/specification/basic-structure/)
  version: 0.0.1
tags:
  - name: Classrooms
  - name: Projects
  - name: Tasks
  - name: Enrollments
  - name: Users
    description: User actions (login, logout, update profile etc.)
paths:
  /catalog/classrooms:
    get:
      tags:
        - Classrooms
      summary: List all Classrooms
      description: This endpoint lists all classrooms. It requires authentication and is available to everyone in TURTL,
        i.e. students, instructors and administrators.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClassrooms'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
    post:
      tags:
        - Classrooms
      summary: Create Classroom
      description: This endpoint allows authenticated instructors or administrators to create a new classroom.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassroomShort'
        required: true
      responses:
        '201':
          description: 'Created: The classroom has been created successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassroomShort'
        '400':
          description: 'Bad Request: This response is returned when validation has failed, e.g. the title is empty.'
          # TODO: Add validation example with unique title
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormValidationFailed'
              example: {
                "errors": {
                  "title": [
                    "This field may not be blank."
                  ]
                }
              }
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          $ref: '#/components/responses/PermissionDeniedStudent'
  /catalog/classrooms/my:
    get:
      tags:
        - Classrooms
      summary: List My Classrooms
      description: This endpoint lists all classrooms that the current user manages. It requires authentication and is 
        available to everyone in TURTL, i.e. students, instructors and administrators. However, the result for students
        will always be an empty array since they are unable to manage classrooms.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClassrooms'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
  /catalog/classrooms/{id}:
    get:
      tags:
        - Classrooms
      summary: View Classroom
      description: This endpoint returns a classroom. It is available to all instructors and administrators.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target classroom
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassroomDetail'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          $ref: '#/components/responses/PermissionDeniedStudent'
        '404':
          $ref: '#/components/responses/ClassroomNotFound'
    put:
      tags:
        - Classrooms
      summary: Update Classroom
      description: This endpoint is used to update an existing classroom. It is available to all administrators and to
        instructors who manage the target classroom. Updating properties of type array (e.g. helpful_resources)
        works by modifying / adding / removing items. When adding an item to an array, you do not have to
        specify an ID since it has to be generated by the backend.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target classroom
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassroomDetail'
        required: true
      responses:
        '200':
          description: 'OK: The Classroom has been updated successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassroomDetail'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          $ref: '#/components/responses/DoesNotManageClassroom'
        '404':
          $ref: '#/components/responses/ClassroomNotFound'
    delete:
      tags:
        - Classrooms
      summary: Delete Classroom
      description: This endpoint is used to delete an existing classroom. It is available to all administrators and to
        instructors who manage the target classroom. You do not have to specify a request body.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target classroom
          schema:
            type: integer
      responses:
        '204':
          $ref: '#/components/responses/SuccessfulDeletion'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          $ref: '#/components/responses/DoesNotManageClassroom'
        '404':
          $ref: '#/components/responses/ClassroomNotFound'
  /catalog/projects:
    post:
      tags:
        - Projects
      summary: Create Project
      description: This endpoint is used to create a new project. It is available to instructors who manage the
        classroom the project is going to be a part of, as well as all administrators.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProject'
      responses:
        '201':
          description: 'Created: The project has been created successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProject'
        '400':
          description: 'Bad Request: No classroom was found with the provided ID or there was a validation error with
                        the project title (e.g. it was too long).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormValidationFailed'
              examples:
                Classroom was not found:
                  description: No classroom with the specified ID was found.
                  value:
                    errors: {
                      "classroom_id": [
                        "Invalid pk \"1\" - object does not exist."
                      ]
                    }
                Title validation failed:
                  description: There were one or multiple validation errors with the project title (e.g. it was longer
                    than 120 characters or blank).
                  value:
                    errors: {
                      "title": [
                        "Ensure this field has no more than 120 characters."
                      ]
                    }
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          description: 'Forbidden: This response is returned when you are neither an instructor who manages the 
                        classroom the new project is a part of nor an administrator.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoPermission'
  /catalog/projects/{id}:
    get:
      tags:
        - Projects
      summary: View Project
      description: This endpoint is used to view an existing project. It is available to all instructors and 
        administrators.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target project
          schema:
            type: integer
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '404':
          $ref: '#/components/responses/ProjectNotFound'
    put:
      tags:
        - Projects
      summary: Update Project
      description: This endpoint is used to update an existing project. It is available to all instructors who manage
        the classroom the target project is a part of, as well as all administrators.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target project
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        '200':
          description: 'OK: The project has been modified successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: 'Bad Request: A validation error was encountered, e.g. with the project title.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormValidationFailed'
              examples:
                Title validation failed:
                  description: There were one or multiple validation errors with the project title (e.g. it was longer
                    than 120 characters or blank).
                  value:
                    errors: {
                      "title": [
                        "Ensure this field has no more than 120 characters."
                      ]
                    }
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          $ref: '#/components/responses/DoesNotManageProject'
        '404':
          $ref: '#/components/responses/ProjectNotFound'
    delete:
      tags:
        - Projects
      summary: Delete Project
      description: This endpoint is used to delete an existing project. It is available to all instructors who manage
        the classroom the target project is a part of, as well as all administrators.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target project
          schema:
            type: integer
      responses:
        '204':
          $ref: '#/components/responses/SuccessfulDeletion'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          $ref: '#/components/responses/DoesNotManageProject'
        '404':
          $ref: '#/components/responses/ProjectNotFound'
  /catalog/tasks:
    post:
      tags:
        - Tasks
      summary: Create Task
      description: This endpoint is used to create a new task. It is available to instructors who manage the classroom
        the project that should contain the new task is a part of, as well as administrators.
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTask'
      responses:
        '201':
          description: 'Created: The task has been created successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTask'
        '400':
          description: 'Bad Request: No project was found with the provided ID or there was a validation error with
                        the task title and/or description (e.g. it was too long).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormValidationFailed'
              examples:
                Project was not found:
                  description: No project with the specified ID was found.
                  value:
                    errors: {
                      "project_id": [
                        "Invalid pk \"1\" - object does not exist."
                      ]
                    }
                Title validation failed:
                  description: There were one or multiple validation errors with the task title (e.g. it was longer
                    than 50 characters or blank).
                  value:
                    errors: {
                      "title": [
                        "Ensure this field has no more than 50 characters."
                      ]
                    }
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          description: 'Forbidden: This response is returned when you are neither an instructor who manages the
                        classroom the project that should contain the new task is a part of, nor an administrator.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoPermission'
  /catalog/tasks/{id}:
    get:
      tags:
        - Tasks
      summary: View Task
      description: This endpoint is used to view an existing task. It is available to all instructors and administrators.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target task
          schema:
            type: integer
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '404':
          $ref: '#/components/responses/TaskNotFound'
    put:
      tags:
        - Tasks
      summary: Update Task
      description: This endpoint is used to update an existing task. It is available to instructors who manage the
        classroom the project that contains the task is a part of, as well as administrators.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target task
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: 'Bad Request: There was a validation error, e.g. with the task title and/or description.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormValidationFailed'
              examples:
                Title validation failed:
                  description: There were one or multiple validation errors with the task title (e.g. it was longer
                    than 50 characters or blank).
                  value:
                    errors: {
                      "title": [
                        "Ensure this field has no more than 50 characters."
                      ]
                    }
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          $ref: '#/components/responses/DoesNotManageTask'
        '404':
          $ref: '#/components/responses/TaskNotFound'
    delete:
      tags:
        - Tasks
      summary: Delete Task
      description: This endpoint is used to delete an existing task. It is available to instructors who manage the
        classroom the project that contains the task is a part of, as well as administrators.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target task
          schema:
            type: integer
      responses:
        '204':
          $ref: '#/components/responses/SuccessfulDeletion'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          $ref: '#/components/responses/DoesNotManageTask'
        '404':
          $ref: '#/components/responses/TaskNotFound'
  /enrollments/for-classroom/{classroom_id}:
    get:
      tags:
        - Enrollments
      summary: View All Enrollments for a Classroom
      description: This endpoint returns a list of all enrollments for a classroom. This endpoint is available to all 
        administrators and to instructors who manage the target classroom.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target classroom
          schema:
            type: integer
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                description: The list of enrollments in the target classroom.
                items:
                  $ref: '#/components/schemas/EnrollmentBase'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          description: 'Forbidden: You are not an administrator, you are an instructor and do not manage the target 
            classroom or you are a student.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoPermission'
              examples:
                Student:
                  description: The current user is a student.
                  value:
                    detail: "Access denied: User is not an instructor."
                Does not manage classroom:
                  description: The current user is an instructor, but not an administrator and does not manage the 
                    target classroom.
                  value:
                    detail: "Access denied: User does not manage this classroom."
        '404':
          $ref: '#/components/responses/ClassroomNotFound'
  /enrollments/my:
    get:
      tags:
        - Enrollments
      summary: List all Enrollments of the current User
      description: This endpoint returns a list of all enrollments of the current user. It is available to all signed-in
        users of TURTL.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnrollmentShort'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
    post:
      tags:
        - Enrollments
      summary: Enroll Current User in a Classroom
      description: This endpoint is used to enroll the current user in a classroom. It is available to all signed-in 
        users of TURTL.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                classroom:
                  type: integer
                  description: The ID of the classroom the user wants to enroll in
                  example: 1
      responses:
        '201':
          description: 'Created: The enrollment has been created successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentShort'
        '400':
          description: 'Bad Request: You are already enrolled in this classroom or the classroom you are trying to 
            enroll in does not exist.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormValidationFailed'
              examples:
                Already Enrolled:
                  description: The current user is already enrolled in this classroom.
                  value:
                    errors: {
                      "classroom": [
                        "You are already enrolled in this classroom."
                      ]
                    }
                Classroom does not exist:
                  description: The classroom the current user is trying to enroll in does not exist.
                  value:
                    errors: {
                      "classroom": [
                        "The classroom you are trying to enroll in does not exist."
                      ]
                    }
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
  /enrollments/{id}:
    get:
      tags:
        - Enrollments
      summary: View Enrollment
      description: This endpoint returns an enrollment. It is available to signed-in users of TURTL. Students can only
        view their own enrollments. Instructors can view enrollments of every member in classrooms they manage.
        Administrators can view every enrollment.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target enrollment
          schema:
            type: integer
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentDetail'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '404':
          $ref: '#/components/responses/EnrollmentNotFound'
    delete:
      tags:
        - Enrollments
      summary: Delete Enrollment
      description: This endpoint is used to delete an existing enrollment, i.e. to unenroll a user. It is available to
        all signed-in users of TURTL. Students can only delete their own enrollments. Instructors can also
        delete enrollments from people enrolled in classrooms they manage. Administrators can delete every
        enrollment.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target enrollment
          schema:
            type: integer
      responses:
        '204':
          $ref: '#/components/responses/SuccessfulDeletion'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '404':
          $ref: '#/components/responses/EnrollmentNotFound'
  /enrollments/{enrollment_id}/task/{task_id}/submit:
    post:
      tags:
        - Enrollments
      summary: View Enrollment
      description: With this endpoint, students can submit a solution to a task. It verifies the data and provides 
        feedback over which solutions were correct and which were not. It is available to all signed-in users of TURTL.
      parameters:
        - name: enrollment_id
          in: path
          required: true
          description: The ID of the target enrollment
          schema:
            type: integer
        - name: task_id
          in: path
          required: true
          description: The ID of the task the student is trying to submit a solution to
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                questions:
                  type: array
                  description: List of objects that contain the question ID and the IDs of the choices the student 
                    selected for each question.
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The ID of the question in the backend.
                        example: 1
                      selected_choices:
                        type: array
                        description: The IDs of the choices the student selected for the question.
                        example: [5,7]
                        items:
                          type: integer
                flags:
                  type: array
                  description: List of objects that contain the flag ID and the text the student entered for this 
                    acceptance criterium when solving the task.
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The ID of the flag in the backend.
                        example: 1
                      solution:
                        type: string
                        description: The text that the student entered for this acceptance criterium when solving the
                          task.
                        example: "FL4G"
                regexes:
                  type: array
                  description: List of objects that contain the regex ID and the text the student entered for this 
                    acceptance criterium when solving the task.
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The ID of the regex in the backend.
                        example: 1
                      solution:
                        type: string
                        description: The text that the student entered for this acceptance criterium when solving the
                          task.
                        example: "abc"
      responses:
        '200':
          description: 'OK: A response that contains whether each solution was correct or not and whether the task has 
            been solved successfully is returned. The task has already been solved by you, so no additional solution 
            was created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskSubmissionResult'
        '201':
          description: 'Created:: A response that contains whether each solution was correct or not and whether the 
            task has been solved successfully is returned. This was the first time you solved the task, so a new 
            solution was created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskSubmissionResult'
        '400':
          description: 'Bad request: You are missing one of the required properties (questions, regexes and flags) or 
            the task you we.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormValidationFailed'
              examples:
                The field regexes is missing:
                  value:
                    errors: {
                      "regexes": [
                        "This field is required."
                      ]
                    }
                Task not in classroom:
                  description: A task with the specified ID was found, but it is not a part of this enrollment's classroom.
                  value:
                    errors: [
                      "You were trying to submit a solution for a task that is not a part of the enrollment's classroom."
                    ]
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          description: 'Forbidden: This response is returned when the enrollment does not belong to the current user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoPermission'
        '404':
          $ref: '#/components/responses/EnrollmentNotFound'
  /users/login:
    post:
      tags:
        - Users
      summary: Sign a user in
      description: This endpoint is used to log in a user.
      # does not require authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email address of the user
                  example: "user@example.com"
                password:
                  type: string
                  description: The user's password
                  example: "12345678"
      responses:
        '200':
          description: 'OK: The user has been signed in successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessAndRefreshToken'
        '400':
          description: 'Bad Request: Invalid JSON or form validation error, e.g. a required field is missing.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormValidationFailed'
              example: {
                "errors": {
                  "password": [
                    "This field is required."
                  ]
                }
              }
        '401':
          description: 'Unauthorized: No active account has been found with the given credentials.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    enum:
                      - No active account found with the given credentials
                    example: "No active account found with the given credentials"
  /users/login/refresh:
    post:
      tags:
        - Users
      summary: Refresh a user's access token
      description: This endpoint is used to refresh a user's access token. Because it is intended to refresh expired 
                   access tokens, it does not require authentication via the HTTP Authentication header.
      # does not require authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessAndRefreshToken'
      responses:
        '200':
          description: 'OK: The refresh token was valid so a new one has been issued along with a new access token.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessAndRefreshToken'
        '400':
          $ref: '#/components/responses/NoRefreshToken'
        '401':
          $ref: '#/components/responses/RefreshTokenInvalid'
  /users/logout:
    post:
      tags:
        - Users
      summary: Log out a user
      description: This endpoint is used to log out a user. It does not require an access token via the Authentication
                   header. It blacklists the refresh token of a user to prevent that user from refreshing their access
                   token.
      # does not require authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessAndRefreshToken'
      responses:
        '200':
          description: 'OK: Logout successful. Returns an empty JSON object'
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/NoRefreshToken'
        '401':
          $ref: '#/components/responses/RefreshTokenInvalid'
  /users/profile:
    get:
      tags:
        - Users
      summary: Get the current user's profile information
      description: This endpoint can be used to get the current user's profile information.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
    put:
      tags:
        - Users
      summary: Update the current user's profile
      description: This endpoint can be used to update the current user's profile. It supports partial updates.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          description: 'OK: (Partial) update was successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: 'Bad Request: JSON or validation error, e.g. the username is too long.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormValidationFailed'
              examples:
                Username too long:
                  description: A user has tried to update their username, but it is too long.
                  value:
                    errors: {
                      "username": [
                        "Ensure this field has no more than 128 characters."
                      ]
                    }
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
  /users/invitations/my:
    get:
      tags:
        - Users
      summary: List Invitations of the Current User
      description: This endpoint lists the invitations that the current user sent via TURTL's email invitation system. 
        It is available to all instructors and administrators.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invitation"
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          description: 'Forbidden: You are a student and therefore cannot access the invitations.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoPermission'
  /users/invitations:
    get:
      tags:
        - Users
      summary: List all Invitations
      description: This endpoint lists all invitations sent via TURTL's email invitation system. It is available to all 
        instructors and administrators.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invitation"
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          description: 'Forbidden: You are a student and therefore cannot access the invitations.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoPermission'
    post:
      tags:
        - Users
      summary: Invite a User
      description: With this endpoint, you can invite a user via TURTL's email invitation system. This endpoint is 
        available to instructors and administrators. However, only administrators can invite instructors.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invitation'
      responses:
        '201':
          description: 'Created: The user has been invited via email.'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
        '400':
          description: "Bad request: There was an error with the data you sent: One of the required fields was missing, 
            contained an invalid value (e.g. too long, blank, invalid email address), the user has already been invited 
            or an account with the user's email address already exists."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormValidationFailed'
              examples:
                Invalid email address:
                  description: The email address is invalid
                  value:
                    errors: {
                      "email": [
                        "Enter a valid email address."
                      ]
                    }
                User already exists:
                  value:
                    errors: {
                      "email": [
                        "A user with this email address already exists."
                      ]
                    }
                Email has already been invited:
                  value:
                    errors: {
                      "email": [
                        "This email address has already been invited."
                      ]
                    }
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          description: 'Forbidden: You are a student and therefore cannot invite a user, or you are an instructor who
            tried to invite another instructor.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoPermission'
              examples:
                You are a student:
                  value:
                    detail: "You do not have permission to perform this action."
                Instructor cannot invite instructor:
                  description: You are an instructor and cannot invite another instructor
                  value:
                    detail: "Only administrators can invite instructors."
  /users/invitations/students/bulk:
    post:
      tags:
        - Users
      summary: Bulk-Invite Students
      description: With this endpoint, you can bulk-invite up to 30 students via TURTL's email invitation system. This 
        endpoint is available to instructors and administrators.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                emails:
                  type: array
                  minLength: 1
                  maxLength: 30
                  description: A list of Email addresses to invite.
                  items:
                    type: string
                    description: An email address of a student to invite
                    maxLength: 254
                  example: [ "jane@doe.com", "jack@doe.com" ]
      responses:
        '201':
          description: 'Created: All email addresses have been invited successfully.'
        '400':
          description: 'Bad Request: The list was empty, contained more than 30 items or there was an error with one or 
            multiple email addresses. It was either invalid, has already been invited or the email address already 
            exists in the database.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormValidationFailed'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          description: 'Forbidden: You are a student and therefore cannot invite users.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoPermission'
  /users/invitations/{id}:
    delete:
      tags:
        - Users
      summary: Delete Invitation
      description: With this endpoint, instructors can delete an invitation they sent. Administrators can delete every 
        invitation. When an invitation is deleted, the invite link becomes invalid.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target invitation that should be deleted
          schema:
            type: integer
      responses:
        '204':
          $ref: '#/components/responses/SuccessfulDeletion'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          description: 'Forbidden: You are either an instructor and did not invite the user whose invitation you are 
            trying to delete or you are a student.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoPermission'
        '404':
          description: 'Not Found: No invitation exists with the specified ID.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  /users/invitations/{id}/renew:
    post:
      tags:
        - Users
      summary: Renew Invitation
      description: With this endpoint, instructors can renew an invitation they sent. Administrators can renew every
        invitation. When an invitation is renewed, the invited user receives a new link via email. The old invite link 
        becomes invalid.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the target invitation that should be renewed
          schema:
            type: integer
      responses:
        '204':
          $ref: '#/components/responses/SuccessfulDeletion'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
        '403':
          description: 'Forbidden: You are either an instructor and did not invite the user whose invitation you are 
            trying to renew or you are a student.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoPermission'
        '404':
          description: 'Not Found: No invitation exists with the specified ID.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  /users/invitations/{id}/accept:
    post:
      tags:
        - Users
      summary: Accept Invitation and Register User
      description: With this endpoint, invited users can accept their invitation and register with TURTL.
      # does not require authentication
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: This object contains the personal data that the invited user wants to use to register with
                TURTL.
              properties:
                email:
                  type: string
                  description: The email address the user wants to register with. Must match the email address the 
                    invitation was sent to.
                  maxLength: 254
                  example: "jane@doe.com"
                password:
                  type: string
                  writeOnly: true
                  description: The password that the user wants to register with. Must be more than 8 but less than 128 
                    characters.
                  minLength: 8
                  maxLength: 128
                token:
                  type: string
                  writeOnly: true
                  description: The token contained within the user's invite link that they received via email.
                  maxLength: 256
                  example: '-cZWrM4vdCnDblRo4avGWdbSebIpjQ3Iq2qQRGnA92Q'
      responses:
        '201':
          description: 'Created: You have registered and can now log in.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    description: The email address the user wants to register with. Must match the email address the
                      invitation was sent to.
                    maxLength: 254
                    example: "jane@doe.com"
        '400':
          description: 'Bad Request: There was a validation error, e.g. the password was too short or too long.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormValidationFailed'
              examples:
                Password was too long:
                  value:
                    errors: {
                      "password": [
                        "Ensure this field has no more than 128 characters."
                      ]
                    }
        '401':
          description: 'Unauthorized: No invitation was found with the given email address and token or the invitation 
            already expired.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: The error detail
                    example: No invitation found for the given email address and token.
              examples:
                No invitation found:
                  value:
                    detail: "No invitation found for the given email address and token."
                Expired invitation:
                  value:
                    detail: "Your invitation has already expired."
  /users/instructors:
    get:
      tags:
        - Users
      summary: List all Instructors / Administrators
      description: This endpoint returns a list of all instructors or administrators (everyone who can manage a
        classroom). It is available to all signed-in Users of TURTL.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserReadOnly'
        '401':
          $ref: '#/components/responses/InvalidOrNoAccessToken'
components:
  schemas:
    ClassroomBase:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: ID of the classroom
          example: 1
        title:
          type: string
          minLength: 1
          maxLength: 120
          description: Title of the classroom. Cannot be blank, has to be unique and 120 or less characters.
          example: "Computer Networks"
        created_at:
          type: string
          readOnly: true
          description: Timestamp of when the classroom has been created.
          example: "2023-09-19T11:42:48.116396Z"
        updated_at:
          type: string
          readOnly: true
          description: Timestamp of when the classroom has been last updated.
          example: "2023-09-19T11:42:48.116396Z"
    ClassroomShort:
      allOf:
        - $ref: '#/components/schemas/ClassroomBase'
        - properties:
            instructors:
              type: array
              readOnly: true
              description: The instructors that manage this classroom.
              items:
                $ref: "#/components/schemas/UserReadOnly"
    ListClassrooms:
      type: array
      items:
        $ref: '#/components/schemas/ClassroomShort'
      example: [ {
        "id": 1,
        "title": "Computer Networks",
        "created_at": "2023-09-19T09:09:42.509748Z",
        "updated_at": "2023-09-19T09:09:42.509748Z",
        "instructors": [
          {
            "id": 1,
            "username": "John Doe",
            "email": "john@doe.com"
          },
          {
            "id": 15,
            "username": null,
            "email": "jane@doe.com"
          }
        ]
      },{
        "id": 2,
        "title": "Hacking Challenges",
        "created_at": "2023-09-19T09:09:42.509748Z",
        "updated_at": "2023-09-19T09:09:42.509748Z",
        "instructors": [
          {
            "id": 1,
            "username": "John Doe",
            "email": "john@doe.com"
          }
        ]
      } ]
    ClassroomDetail:
      allOf:
        - $ref: '#/components/schemas/ClassroomBase'
        - properties:
            projects:
              type: array
              description: List of projects that are contained within this classroom.
              items:
                $ref: '#/components/schemas/Project'
            helpful_resources:
              type: array
              description: A list of named URLs that should be displayed to students when they view the classroom.
              items:
                $ref: '#/components/schemas/HelpfulResource'
            instructors:
              type: array
              description: The instructors that manage this classroom. Note that this datastructure is slightly
                           different from the one in the classroom list, as it also contains the person who added the 
                           instructor to the classroom as well as the timestamp the instructor has been added at.
              readOnly: false
              items:
                $ref: "#/components/schemas/ClassroomInstructor"
    HelpfulResource:
      type: object
      properties:
        id:
          type: integer
          description: ID of the HelpfulResource. Not necessary when creating, but necessary when updating
            a HelpfulResource.
          example: 1
        title:
          type: string
          minLength: 1
          maxLength: 120
          description: The title that should be shown to students.
          example: "Moodle course"
        url:
          type: string
          minLength: 1
          maxLength: 200
          description: The URL to the resource.
          example: "https://moodle.de/course/view.php?id=24"
    ClassroomInstructor:
      type: object
      properties:
        id:
          description: ID of the ClassroomInstructor object. Can be left out when adding a new instructor.
          type: integer
          example: 1
          readOnly: true
        instructor:
          $ref: '#/components/schemas/UserWithPropertiesReadOnly'
        added_at:
          description: Timestamp of when the instructor was added
          type: string
          example: "2023-09-19T11:42:48.129472Z"
          readOnly: true
        added_by:
          $ref: '#/components/schemas/UserReadOnly'
    CreateProject:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the project in the backend. Read-only, will be returned in the response but is not
                       necessary when creating a new project.
          readOnly: true
          example: 1
        title:
          type: string
          minLength: 1
          maxLength: 120
          description: Title of the project. Cannot be blank or null, must be less than 120 characters and unique within
                       the classroom.
          example: "Introduction to firewalls"
        classroom_id:
          type: integer
          description: The ID of the classroom this project should become a part of.
          example: 1
    ProjectBase:
      type: object
      properties:
        id:
          type: integer
          description: ID of the project. Generated in the backend, cannot be modified.
          readOnly: true
          example: 1
        title:
          type: string
          description: Title of the project. Cannot be blank or null, must be less than 120 characters and unique within
            the classroom this project is a part of.
          # TODO: add validation example with non-unique title
          example: "Introduction to firewalls"
    Project:
      allOf:
        - $ref: '#/components/schemas/ProjectBase'
        - properties:
            tasks:
              type: array
              description: The tasks that are contained within this project.
              items:
                $ref: '#/components/schemas/Task'
    TaskBase:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: The ID of the task in the backend. Read-only, will be returned in the response but is not
                       necessary when creating a new task.
          example: 1
        title:
          type: string
          minLength: 1
          maxLength: 50
          description: The title of the task. Must be a maximum of 50 characters and not blank or null. Has to be unique
                       within the project that contains this task.
          example: "Block incoming traffic using UFW"
        description:
          type: string
          description: Description of what the student has to do to solve the task.
          example: "Run the following commands:..."
        task_type:
          type: string
          description: The type of this task (neutral, attack, defense).
          enum:
            - NEUTRAL
            - ATTACK
            - DEFENSE
          example: "NEUTRAL"
        difficulty:
          type: string
          description: The difficulty level of this task (beginner, intermediate, advanced).
          enum:
            - BEGINNER
            - INTERMEDIATE
            - ADVANCED
          example: "BEGINNER"
    AcceptanceCriteriaBase:
      type: object
      required: false
      description: The criteria that students need to fulfill to solve this task. If the task is newly created
        (either through the separate endpoint /catalog/tasks or using the PUT /catalog/classrooms/<id>
        endpoint), this object is not required. When the task is newly created and this object is not
        provided, the backend will by default disable the acceptance criteria, e.g. return an
        AcceptanceCriteria object of type "DISABLED".
      properties:
        id:
          type: integer
          readOnly: true
          description: The ID of the acceptance criteria object in the backend. Read-only, will be returned in the
            response but is not necessary to create a new task.
        criteria_type:
          type: string
          enum:
            - DISABLED
            - MANUAL
            - REGEX
            - FLAG
            - QUIZ
            - MIXED
          example: MIXED
          description: The type of the acceptance criteria. If an AcceptanceCriteria object is of type "REGEX", it
            can only contain regexes. Similarly, a type of "FLAG" only allows flags. If you want to
            provide multiple kinds of acceptance criteria, the criteria type needs to be "MIXED".
            "DISABLED" means that a student does not have to do anything to solve the task. "MANUAL" is
            not fully implemented yet. The idea was that, when the task has an AcceptanceCriteria of type
            "MANUAL", the instructors of the classroom should be able to manually mark the task as solved
            for each student.
        flags:
          type: array
          description: A list of flags. This property is only required when you have an AcceptanceCriteria of type
            "FLAG". A validation error will be returned when this argument is provided, the array is not
            empty and the AcceptanceCriteria type is neither "FLAG" nor "MIXED".
        regexes:
          type: array
          description: A list of regexes. This property is only required when you have an AcceptanceCriteria of type
            "REGEX". A validation error will be returned when this argument is provided, the array is not
            empty and the AcceptanceCriteria type is neither "REGEX" nor "MIXED".
        questions:
          type: array
          description: A list of questions. This property is only required when you have an AcceptanceCriteria of type
            "QUIZ". A validation error will be returned when this argument is provided, the array is not
            empty and the AcceptanceCriteria type is neither "QUIZ" nor "MIXED".
    AcceptanceCriteriaStudent:
      allOf:
        - $ref: '#/components/schemas/AcceptanceCriteriaBase'
        - properties:
            flags:
              items:
                $ref: '#/components/schemas/FlagStudent'
            regexes:
              items:
                $ref: '#/components/schemas/RegExStudent'
            questions:
              items:
                $ref: '#/components/schemas/QuestionStudent'
    AcceptanceCriteria:
      allOf:
        - $ref: '#/components/schemas/AcceptanceCriteriaBase'
        - properties:
            flags:
              items:
                $ref: '#/components/schemas/Flag'
            regexes:
              items:
                $ref: '#/components/schemas/RegEx'
            questions:
              items:
                $ref: '#/components/schemas/Question'
    FlagStudent:
      type: object
      description: An acceptance criterium of type FLAG is intended to be displayed to students as a text input with a
                   prompt above which indicates what should be entered in the text field. Validation is performed
                   by directly comparing whether the content of the string the student submitted is equal to the value 
                   the instructor specified for this criterium.
      properties:
        id:
          type: integer
          readOnly: true
          description: The ID of the flag in the backend. Read-only, will be returned in the response but is not
                       necessary when creating a new flag.
          example: 1
        prompt:
          type: string
          description: The prompt that should be displayed to students above the text field where they can enter the 
                       solution. Cannot be blank or null and has to be 200 characters or less.
          minLength: 1
          maxLength: 200
          example: "Please enter the flag that you found in the /root/flag.txt file:"
    Flag:
      allOf:
        - $ref: '#/components/schemas/FlagStudent'
        - properties:
            value:
              type: string
              description: The value of the flag. A student has to enter this exact string to consider this criterium
                           fulfilled. Cannot be blank or null and has to be 200 characters or less.
              minLength: 1
              maxLength: 200
              example: "you hacked me successfully :)"
    RegExStudent:
      type: object
      description: An acceptance criterium of type REGEX is intended to be displayed to students as a text input with a 
                   prompt above which indicates what should be entered in the text field. Validation is performed 
                   against a regular expression that instructors can specify. If the validation of the string the 
                   the student submitted is successful, this acceptance criterium will be considered fulfilled.
      properties:
        id:
          type: integer
          readOnly: true
          description: The ID of the regex in the backend. Read-only, will be returned in the response but is not
                       necessary when creating a new regex.
          example: 1
        prompt:
          type: string
          description: The prompt that should be displayed to students above the text field where they can enter the
                       solution. Cannot be blank or null and has to be 200 characters or less.
          minLength: 1
          maxLength: 200
          example: "Please enter your solution:"
    RegEx:
      allOf:
        - $ref: '#/components/schemas/RegExStudent'
        - properties:
            pattern:
              type: string
              description: The pattern the text the student enters should be validated against. Cannot be blank or null 
                           and has to be 200 characters or less.
              minLength: 1
              maxLength: 200
              example: "([A-Z])\\w+"
    QuestionChoiceStudent:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the choice
          readOnly: true
          example: 1
        answer:
          type: string
          description: The answer text
          minLength: 1
          maxLength: 200
          example: "Yes"
    QuestionChoice:
      allOf:
        - $ref: '#/components/schemas/QuestionChoiceStudent'
        - properties:
            is_correct:
              type: boolean
              description: Determines whether this choice is the correct answer (single choice) or one of the correct
                           answers (multiple choice).
    QuestionBase:
      type: object
      description: An acceptance criterium of type QUESTION is intended to be displayed to students as a single or
        multiple choice question (i.e. either using radio buttons or using checkboxes). For multiple choice
        questions, each choice with the property is_correct=true must be selected by the student to answer
        the question correctly. If the students fails to select all correct choices or selects a choice that
        is not correct, the question will not be considered correctly answered.
      properties:
        id:
          type: integer
          description: The ID of the question in the backend. Read-only, will be returned in the response but is not
            necessary when creating a new question.
          example: 1
        question:
          type: string
          description: The question itself
          minLength: 1
          maxLength: 200
          example: "What is the command to perform a SYN port scan with nmap?"
        question_type:
          type: string
          enum:
            - SINGLE_CHOICE
            - MULTIPLE_CHOICE
          description: Type of the Question. Determines whether checkboxes or radio buttons are displayed in the
            frontend (radio buttons for single choice questions, checkboxes for multiple choice questions).
          example: "SINGLE_CHOICE"
    QuestionStudent:
      allOf:
        - $ref: '#/components/schemas/QuestionBase'
        - properties:
            choices:
              type: array
              description: The possible choices students have when answering the question.
              items:
                $ref: '#/components/schemas/QuestionChoiceStudent'
              example: [ {
                "id": 1,
                "answer": "nmap -sX [...]"
              }, {
                "id": 2,
                "answer": "nmap -sC [...]"
              },{
                "id": 3,
                "answer": "nmap -sS [...]"
              } ]
    Question:
      allOf:
        - $ref: '#/components/schemas/QuestionBase'
        - properties:
            choices:
              type: array
              description: The possible choices students have when answering the question.
              items:
                $ref: '#/components/schemas/QuestionChoice'
              example: [ {
                "id": 1,
                "answer": "nmap -sX [...]",
                "is_correct": false
              }, {
                "id": 2,
                "answer": "nmap -sC [...]",
                "is_correct": false
              },{
                "id": 3,
                "answer": "nmap -sS [...]",
                "is_correct": true
              } ]
    CreateTask:
      allOf:
        - $ref: '#/components/schemas/TaskBase'
        - type: object
          properties:
            acceptance_criteria:
              $ref: '#/components/schemas/AcceptanceCriteria'
            project_id:
              type: integer
              description: The ID of the project that this task should be a part of
              example: 1
    Task:
      allOf:
        - $ref: '#/components/schemas/TaskBase'
        - properties:
            virtualizations:
              type: array
              items:
                $ref: '#/components/schemas/Virtualization'
            acceptance_criteria:
              $ref: '#/components/schemas/AcceptanceCriteria'
    Virtualization:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: The ID of the virtualization
          example: 1
        name:
          type: string
          description: The name of the virtualization.
          example: "Kali Linux shell"
        role:
          type: string
          enum:
            - USER_SHELL
            - USER_ACCESSIBLE
          description: The role this virtualization has. A role of "USER_SHELL" indicates that this virtualization is 
                       intended to be displayed to students as a shell when solving a particular task. A role of 
                       "USER_ACCESSIBLE" specifies that this virtualization should be in the same network as the 
                       "USER_SHELL" (i.e. accessible via its IP address), but not displayed to students as a shell.
          example: "USER_SHELL"
        dockerfile:
          type: string
          description: The Dockerfile used to generate an instance of this virtualization.
          example: "FROM kalilinux/kali-rolling\nWORKDIR /root\nRUN apt -y update && DEBIAN_FRONTEND=noninteractive apt -y dist-upgrade && apt -y autoremove && apt clean"
    EnrollmentBase:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: ID of the enrollment. Generated by the backend.
          example: 1
        student:
          $ref: '#/components/schemas/UserReadOnly'
        date_enrolled:
          type: string
          readOnly: true
          description: Timestamp of when the student was enrolled
          example: "2023-09-19T11:42:48.129472Z"
        progress:
          type: integer
          readOnly: true
          minimum: 0
          maximum: 100
          description: The progress the student has made in the classroom, provided as a percentage rounded to the
                       nearest integer.
          example: 67
    EnrollmentShort:
      allOf:
        - $ref: '#/components/schemas/EnrollmentBase'
        - type: object
          properties:
            classroom:
              $ref: '#/components/schemas/ClassroomShort'
    EnrollmentDetail:
      allOf:
        - $ref: '#/components/schemas/EnrollmentBase'
        - properties:
            classroom:
              $ref: '#/components/schemas/ClassroomStudent'
    ClassroomStudent:
      allOf:
        - $ref: '#/components/schemas/ClassroomBase'
        - properties:
            instructors:
              type: array
              description: The instructors that manage this classroom. Note that this datastructure is different from 
                           the datastructure of the instructor endpoint as it only contains the actual instructors and 
                           no additional information.
              items:
                $ref: '#/components/schemas/UserReadOnly'
            projects:
              type: array
              description: The projects that are contained within this classroom.
              items:
                $ref: '#/components/schemas/ProjectStudent'
            helpful_resources:
              type: array
              description: A list of named URLs that should be displayed to students when they view the classroom.
              items:
                $ref: '#/components/schemas/HelpfulResource'
    ProjectStudent:
      allOf:
        - $ref: '#/components/schemas/ProjectBase'
        - properties:
            tasks:
              type: array
              description: The tasks that are contained within this project.
              items:
                $ref: '#/components/schemas/TaskStudent'
            progress:
              type: integer
              readOnly: true
              minimum: 0
              maximum: 100
              description: The progress the student has made in the project, provided as a percentage rounded to the
                nearest integer.
              example: 67
    TaskStudent:
      allOf:
        - $ref: '#/components/schemas/TaskBase'
        - properties:
            done:
              type: boolean
              readOnly: true
              default: false
              description: Indicates whether the student has already solved the task.
            date_submitted:
              type: string
              readOnly: true
              nullable: true
              default: null
              description: Timestamp of when the student has submitted their valid solution. Will be null in case the
                           student has not solved the task yet (i.e. done=false).
            acceptance_criteria:
              $ref: '#/components/schemas/AcceptanceCriteriaStudent'
    TaskSubmissionResult:
      type: object
      properties:
        questions:
          type: object
          description: A map of each question's ID with a result, i.e. whether the question was answered
            correctly, incorrectly or no solution was turned in for the question, meaning that the question
            was missing.
          additionalProperties:
            type: string
            enum:
              - correct
              - incorrect
              - missing
          example: {
            "1": "correct",
            "2": "incorrect",
            "3": "correct",
            "4": "missing"
          }
        flags:
          type: object
          description: A map of each flag's ID with a result, i.e. whether the text entered for the flag
            matched (answered correctly), did not match (answered incorrectly) or no solution was turned in
            for the flag, meaning that the flag was missing.
          additionalProperties:
            type: string
            enum:
              - correct
              - incorrect
              - missing
          example: {
            "1": "correct",
            "2": "incorrect"
          }
        regexes:
          type: object
          description: A map of each regex's ID with a result, i.e. whether the text entered for the regex
            matched (answered correctly), did not match (answered incorrectly) or no solution was turned in
            for the regex, meaning that the regex was missing.
          additionalProperties:
            type: string
            enum:
              - correct
              - incorrect
              - missing
          example: {
            "1": "correct",
            "3": "correct"
          }
        passed:
          type: boolean
          description: Result of whether the student answered all acceptance criteria correctly and solved the
            task.
          example: false
    AccessAndRefreshToken:
      type: object
      properties:
        access:
          type: string
          readOnly: true
          description: "Access token, intended to be sent in an \"Authorization: Bearer\" header when performing a request requiring authentication"
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2..."
        refresh:
          type: string
          description: Refresh token, can be used to obtain a new access token.
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2..."
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: ID of the user.
          example: 12
        email:
          type: string
          readOnly: true
          description: Email address of the current user. Cannot be changed, hence it is read-only.
          example: "john@doe.com"
        username:
          type: string
          nullable: true
          required: false
          description: Username, optional. Null by default. To remove a user's username, set it to null.
          minLength: 2
          maxLength: 128
          example: "John Doe"
    UserProfile:
      allOf:
        - $ref: '#/components/schemas/User'
        - properties:
            role:
              type: string
              readOnly: true
              description: A string describing the current user's role. Cannot be changed here, hence it is read-only.
              enum:
                - STUDENT
                - INSTRUCTOR
                - ADMINISTRATOR
              example: "STUDENT"
            role_display:
              type: string
              readOnly: true
              description: A display-friendly string describing the current user's role. Cannot be changed here,
                hence it is read-only.
              enum:
                - Student
                - Instructor
                - Administrator
              example: "Student"
            current_password:
              type: string
              writeOnly: true
              required: false
              description: Current password, required when new_password is present, ignored otherwise.
              example: "12345678"
            new_password:
              type: string
              writeOnly: true
              required: false
              minLength: 8
              maxLength: 128
              description: New password, used to update a user's password. When new_password is present,
                current_password also has to be present.
              example: "123456789"
    UserWithPropertiesReadOnly:
      allOf:
        - $ref: '#/components/schemas/User'
        - properties:
            email:
              readOnly: true
              description: Email address of the user.
            username:
              readOnly: true
              description: Username, optional. Null by default.
    UserReadOnly:
      allOf:
        - $ref: '#/components/schemas/UserWithPropertiesReadOnly'
        - readOnly: true
    Invitation:
      type: object
      description: This object represents an invitation sent via TURTL's email invitation system.
      properties:
        id:
          type: integer
          readOnly: true
          description: The ID of the invitation. Generated in the backend.
          example: 1
        email:
          type: string
          description: The email address of the invited user.
          maxLength: 254
          example: "jane@doe.com"
        target_role:
          type: string
          enum:
            - STUDENT
            - INSTRUCTOR
          description: The role the invited user will have once they join TURTL.
          example: "STUDENT"
        target_role_display:
          type: string
          readOnly: true
          description: A display-friendly version of the role the invited user will have once they join TURTL.
          example: "Student"
        issuer:
          $ref: '#/components/schemas/UserReadOnly'
        expiration_date:
          type: string
          readOnly: true
          description: A timestamp specifying when the issued invitation will expire. Generated by the backend.
          example: "2023-09-19T09:09:42.509748Z"
    NoPermission:
      type: object
      properties:
        detail:
          type: string
          example: "You do not have permission to perform this action."
    InvalidAccessToken:
      type: object
      properties:
        detail:
          type: string
          example: "Given token not valid for any token type"
        code:
          type: string
          example: "token_not_valid"
        messages:
          type: array
          items:
            type: object
            properties:
              token_class:
                type: string
                example: "AccessToken"
              token_type:
                type: string
                example: "access"
              message:
                type: string
                example: "Token is invalid or expired"
    NoAccessToken:
      type: object
      properties:
        detail:
          type: string
          description: Error message
          enum:
            - Authentication credentials were not provided.
          example: "Authentication credentials were not provided."
    FormValidationFailed:
      type: object
      properties:
        errors:
          type: object
          properties:
            field_name:
              type: array
              items:
                type: string
                example: "Error message"
    NotFound:
      type: object
      properties:
        detail:
          type: string
          example: "Not found."
  responses:
    InvalidOrNoAccessToken:
      description: 'Unauthorized: You have not provided an access token or the access token you provided is invalid or expired.'
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/NoAccessToken'
              - $ref: '#/components/schemas/InvalidAccessToken'
    PermissionDeniedStudent:
      description: 'Forbidden: This response is returned when the user the access token belongs to does not have 
                    permission to create a Classroom, i.e. when they are a student.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NoPermission'
    SuccessfulDeletion:
      description: 'No Content: Successful Deletion. Returns an empty response body.'
    ClassroomNotFound:
      description: 'Not Found: This response is returned when no Classroom exists with the specified ID.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    DoesNotManageClassroom:
      description: 'Forbidden: This response is returned when you are neither an administrator nor an instructor who
                    manages the target classroom.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NoPermission'
    ProjectNotFound:
      description: 'Not Found: This response is returned when no Project exists with the specified ID.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    DoesNotManageProject:
      description: 'Forbidden: This response is returned when you have provided no access token or when you are
                    neither an Instructor who manages the Classroom this Project is a part of nor an Administrator.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NoPermission'
    TaskNotFound:
      description: 'Not Found: This response is returned when no Task exists with the specified ID.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    DoesNotManageTask:
      description: 'Forbidden: This response is returned when you have provided no access token or when you are
                    neither an Instructor who manages the Classroom the Project containing this Task is a part of,
                    nor an Administrator.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NoPermission'
    NoRefreshToken:
      description: 'Bad Request: Invalid JSON or form validation error, e.g. the refresh token is missing.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FormValidationFailed'
          example: {
            "errors": {
              "refresh": [
                "This field is required."
              ]
            }
          }
    RefreshTokenInvalid:
      description: 'Unauthorized: Token is invalid or expired.'
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                enum:
                  - Token is invalid or expired
                example: "Token is invalid or expired"
              code:
                type: string
                enum:
                  - token_not_valid
                example: "token_not_valid"
    EnrollmentNotFound:
      description: 'Not Found: This response is returned when no Enrollment exists with the specified ID.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Requires JWT authentication. JWT tokens in TURTL have multiple custom claims, see the documentation on authentication for further details."
# by default, every endpoint requires bearer authentication
security:
  - bearerAuth: []